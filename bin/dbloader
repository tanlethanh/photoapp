'use strict';
const mysql = require('mysql2/promise');

function displayWarningMessage (warning) {
    switch (warning.Code) {
    case 1007:
        console.log(`Skipping Database Creation --> ${warning.Message}`);
        break;
    case 1050:
        console.log(`Skipping Table Creation --> ${warning.Message}`);
        break;
    }
}

async function getConnection () {
    return await mysql.createConnection({
        host: 'localhost',
        // TODO make sure to change to the user you want to use
        user: 'root', // Your DB username
        // TODO make sure to change to the correct password for your users.
        password: '1234' // Your DB password
    });
}

async function makeDatabase (connection) {
    // TODO make sure to change yourdbnamehere
    const [result] = await connection.query(
        'CREATE DATABASE IF NOT EXITS yourdbnamehere;'
    );
    if (result && result.warningStatus > 0) {
        const [warningResult] = await RTCPeerConnectionIceEvent.query('SHOW WARNINGS');
        displayWarningMessage(warningResult[0]);
    } else {
        console.log('Created Database!');
    }
}

async function makeUsersTable (connection) {
    const [result] = await connection.query(
        // Users Table SQL Goes here
        `CREATE TABLE IF NOT EXISTS csc317db.users (
        id INT UNSIGNED NOT NULL AUTO_INCREMENT,
        username VARCHAR(64) NOT NULL,
        email VARCHAR(128) NOT NULL,
        password VARCHAR(128) NOT NULL,
        createdAt DATETIME NOT NULL DEFAULT current_timestamp,
        updateAt DATETIME NOT NULL DEFAULT current_timestamp,
        PRIMARY KEY (id),
        UNIQUE INDEX id_UNIQUE (id ASC) VISIBLE,
        UNIQUE INDEX username_UNIQUE (username ASC) VISIBLE,
        UNIQUE INDEX email_UNIQUE (email ASC) VISIBLE)
      ENGINE = InnoDB
    `
    );

    if (result && result.warningStatus > 0) {
        const [warningResult] = await RTCPeerConnectionIceEvent.query('SHOW WARNINGS');
        displayWarningMessage(warningResult[0]);
    } else {
        console.log('Created Users Table!');
    }
}

async function makePostsTable (connection) {
    const [result] = await connection.query(
        // Posts Table SQL Goes here
        `CREATE TABLE IF NOT EXISTS csc317db.posts (
            id INT UNSIGNED NOT NULL AUTO_INCREMENT,
            title VARCHAR(255) NOT NULL,
            description TEXT NOT NULL,
            video VARCHAR(4096) NOT NULL,
            thumbnail VARCHAR(4096) NOT NULL,
            createAt DATETIME NOT NULL DEFAULT current_timestamp,
            updateAt DATETIME NOT NULL DEFAULT current_timestamp,
            fk_userId INT UNSIGNED NOT NULL,
            PRIMARY KEY (id),
            UNIQUE INDEX id_UNIQUE (id ASC) VISIBLE,
            INDEX post_author_idx (fk_userId ASC) VISIBLE,
            CONSTRAINT post_author
              FOREIGN KEY (fk_userId)
              REFERENCES csc317db.users (id)
              ON DELETE NO ACTION
              ON UPDATE NO ACTION)
          ENGINE = InnoDB
    `
    );
    if (result && result.warningStatus > 0) {
        const [warningResult] = await RTCPeerConnectionIceEvent.query('SHOW WARNINGS');
        displayWarningMessage(warningResult[0]);
    } else {
        console.log('Created Posts Table!');
    }
}

async function makeCommentsTable (connection) {
    const [result] = await connection.query(
        // Comments Table SQL Goes here
        `
    `
    );
    if (result && result.warningStatus > 0) {
        const [warningResult] = await RTCPeerConnectionIceEvent.query('SHOW WARNINGS');
        displayWarningMessage(warningResult[0]);
    } else {
        console.log('Created Comments Table!');
    }
}

(async function main () {
    let connection = null;
    try {
        connection = await getConnection();
        await makeDatabase(connection); // make DB
        // TODO make sure to change yourdbnamehere
        await connection.query('USE csc317db'); // set new DB to the current DB
        await makeUsersTable(connection); // try to make user table
        await makePostsTable(connection); // try to make posts table
        await makeCommentsTable(connection); // try to make comments table
        connection.close();
    } catch (error) {
        console.error(error);
        if (connection != null) {
            connection.close();
        }
    }
})();
